generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://dev:Skillware4u@161.97.71.218:3306/zipr"
  // url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDER
}

model Customer {
  id              Int               @id @default(autoincrement())
  isActive        Boolean           @default(false)
  User            User[]
  FollowProduct   FollowProduct[]
  FavoriteProduct FavoriteProduct[]
  Order           Order[]
}

model Vender {
  id       Int       @id @default(autoincrement())
  bio      String?
  location String?
  isActive Boolean   @default(false)
  User     User[]
  Product  Product[]
}

model User {
  id                   Int                 @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String              @unique
  password             String?
  picture              String?
  userType             UserType
  customer             Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId           Int
  vender               Vender              @relation(fields: [venderId], references: [id], onDelete: Cascade)
  venderId             Int
  Chat                 Chat[]
  UserChatConnection   UserChatConnection?
}

model Product {
  id              Int               @id @default(autoincrement())
  vender          Vender            @relation(fields: [venderId], references: [id], onDelete: Cascade)
  venderId        Int
  name            String
  description     String
  price           Float
  picture         Json
  location        String
  tag             Json
  category        String            @default("")
  rating          Int               @default(0)
  FollowProduct   FollowProduct[]
  FavoriteProduct FavoriteProduct[]
  OrderItem       OrderItem[]
}

model Category {
  id    Int    @id @default(autoincrement())
  label String
  value String
}

model FollowProduct {
  id        Int      @id @default(autoincrement())
  user      Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId], name: "unique_following_products")
}

model FavoriteProduct {
  id        Int      @id @default(autoincrement())
  user      Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId], name: "unique_favorite_products")
}

enum OrderStatus {
  PENDING // when the order is add in checkout
  CAPTUREED // when the order is add payment  
  PROOCESSING // When the order is accepts
  DISPATCHED // when the order is given to delivery boy
  DELIVERED // when the order is get customer from delivery boy
  COMPLETED
  COMPLETED_ORDER
}

enum Status {
  PENDING
  CAPTUREED
  PROOCESSING
  DISPATCHED
  DELIVERED
  COMPLETED
  COMPLETED_ORDER
}

model Order {
  id           Int         @id @default(autoincrement())
  customer     Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   Int
  price        Float
  shipingPrice Float
  totalPrice   Float
  createdAt    DateTime    @default(now())
  status       Status
  OrderItem    OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
}

model Chat {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  roomId     String   @default("")
  message    String   @db.LongText()
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model UserChatConnection {
  id        Int      @id @default(autoincrement())
  socketId  String
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
}
