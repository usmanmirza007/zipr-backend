generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDER
}

model Customer {
  id              Int               @id @default(autoincrement())
  isActive        Boolean           @default(false)
  CheckoutOrder   CheckoutOrder[]
  User            User[]
  FollowProduct   FollowProduct[]
  FavoriteProduct FavoriteProduct[]
  Order           Order[]
}

model Vender {
  id       Int       @id @default(autoincrement())
  bio      String?
  location String?
  isActive Boolean   @default(false)
  User     User[]
  Product  Product[]
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  password   String?
  picture    String?
  userType   UserType
  customer   Customer @relation(fields: [venderId], references: [id], onDelete: Cascade)
  venderId   Int
  vender     Vender   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
}

model Product {
  id              Int               @id @default(autoincrement())
  vender          Vender            @relation(fields: [venderId], references: [id], onDelete: Cascade)
  venderId        Int
  name            String
  description     String
  price           Float
  picture         Json
  location        String
  tag             Json
  category        String            @default("")
  rating          Int               @default(0)
  FollowProduct   FollowProduct[]
  FavoriteProduct FavoriteProduct[]
}

model Category {
  id    Int    @id @default(autoincrement())
  label String
  value String
}

model FollowProduct {
  id        Int      @id @default(autoincrement())
  user      Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId], name: "unique_following_products")
}

model FavoriteProduct {
  id        Int      @id @default(autoincrement())
  user      Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId], name: "unique_favorite_products")
}

enum OrderStatus {
  PENDING
  DISPATCH
  ACCEPT
  COMPLETED
}

model Order {
  id          Int         @id @default(autoincrement())
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  name        String
  description String
  quantity    Int
  price       Float
  picture     Json
  status      OrderStatus
}

model CheckoutOrder {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  name        String
  description String
  price       Float
  quantity    Int
  venderName  String
  venderBio   String
  picture     String
  location    String
  status      String
  Tag         Json
}
