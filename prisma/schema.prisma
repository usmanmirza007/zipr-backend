generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDER
}

model Customer {
  id            Int             @id @default(autoincrement())
  isActive      Boolean         @default(false)
  FollowOrder   FollowOrder[]
  FavoriteOrder FavoriteOrder[]
  CheckoutOrder CheckoutOrder[]
  User          User[]
}

model Vender {
  id       Int     @id @default(autoincrement())
  bio      String?
  location String?
  isActive Boolean @default(false)
  Order    Order[]
  User     User[]
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  password   String?
  picture    String?
  userType   UserType
  customer   Customer @relation(fields: [venderId], references: [id], onDelete: Cascade)
  venderId   Int
  vender     Vender   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
}

model Order {
  id            Int             @id @default(autoincrement())
  vender        Vender          @relation(fields: [venderId], references: [id], onDelete: Cascade)
  venderId      Int
  name          String
  description   String
  price         Float
  picture       Json
  location      String
  Tag           Json
  category      String          @default("")
  FollowOrder   FollowOrder[]
  FavoriteOrder FavoriteOrder[]
}

model Category {
  id    Int    @id @default(autoincrement())
  label String
  value String
}

model FollowOrder {
  id      Int      @id @default(autoincrement())
  user    Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  @@unique([userId, orderId], name: "unique_following_user")
}

model FavoriteOrder {
  id      Int      @id @default(autoincrement())
  user    Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  @@unique([userId, orderId], name: "unique_favorite_order")
}

model CheckoutOrder {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  name        String
  description String
  price       Float
  quantity    Int
  venderName  String
  venderBio   String
  picture     String
  location    String
  status      String
  Tag         Json
}
