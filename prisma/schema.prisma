generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  VENDOR
}

model Customer {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  password   String?
  picture    String?
  userType   UserType
}

model Vendor {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  password   String?
  vendorName String?
  bio        String?
  location   String?
  picture    String?
  userType   UserType
}

// enum Visible {
//   PUBLIC
//   PRIVATE
// }

// model Tournament {
//   id               Int                @id @default(autoincrement())
//   title            String
//   visibility       Visible
//   startDate        DateTime
//   endDate          DateTime
//   registrationDate DateTime
//   fee              Int
//   user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId           Int
//   FollowTournament FollowTournament[]
// }

// model Team {
//   id           Int      @id @default(autoincrement())
//   name         String
//   playerNumber Int
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId       Int
//   Player       Player[]
// }

// model Player {
//   id     Int    @id @default(autoincrement())
//   name   String
//   team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
//   teamId Int
// }

// model FollowTournament {
//   id           Int        @id @default(autoincrement())
//   user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId       Int
//   tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
//   tournamentId Int

//   @@unique([userId, tournamentId], name: "unique_following_user")
// }

// model Match {
//   id           Int      @id @default(autoincrement())
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId       Int
//   firstTeamId  Int
//   secondTeamId Int
//   startDate    DateTime
// }
